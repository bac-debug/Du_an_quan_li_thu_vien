package Server;

import java.io.*;
import java.net.*;
import java.util.*;

public class Server {
    private static final int PORT = 12345;
    private static final String DATA_FILE = "data.txt";

    private static List<String> users = new ArrayList<>();
    private static List<String> books = new ArrayList<>();
    private static List<String> borrows = new ArrayList<>();

    public static void main(String[] args) {
        loadData();

        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            System.out.println("üìö Library Server is running on port " + PORT);

            while (true) {
                Socket socket = serverSocket.accept();
                System.out.println("üëâ Client connected: " + socket);

                new Thread(new ClientHandler(socket)).start();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // ƒê·ªçc d·ªØ li·ªáu t·ª´ file
    private static void loadData() {
        try (BufferedReader br = new BufferedReader(new FileReader(DATA_FILE))) {
            String line;
            String section = "";

            while ((line = br.readLine()) != null) {
                if (line.startsWith("#")) {
                    section = line;
                } else if (!line.trim().isEmpty()) {
                    switch (section) {
                        case "#USERS":
                            users.add(line);
                            break;
                        case "#BOOKS":
                            books.add(line);
                            break;
                        case "#BORROWS":
                            borrows.add(line);
                            break;
                    }
                }
            }
            System.out.println("‚úÖ D·ªØ li·ªáu ƒë√£ load t·ª´ file.");
        } catch (IOException e) {
            System.out.println("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file d·ªØ li·ªáu, s·∫Ω t·∫°o m·ªõi.");
        }
    }

    // Ghi d·ªØ li·ªáu xu·ªëng file
    public static synchronized void saveData() {
        try (PrintWriter pw = new PrintWriter(new FileWriter(DATA_FILE))) {
            pw.println("#USERS");
            for (String u : users) pw.println(u);

            pw.println("#BOOKS");
            for (String b : books) pw.println(b);

            pw.println("#BORROWS");
            for (String br : borrows) pw.println(br);

            System.out.println("üíæ D·ªØ li·ªáu ƒë√£ l∆∞u xu·ªëng file.");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // L·ªõp x·ª≠ l√Ω client
    static class ClientHandler implements Runnable {
        private Socket socket;

        ClientHandler(Socket socket) {
            this.socket = socket;
        }

        @Override
        public void run() {
            try (
                DataInputStream dis = new DataInputStream(socket.getInputStream());
                DataOutputStream dos = new DataOutputStream(socket.getOutputStream())
            ) {
                while (true) {
                    String request = dis.readUTF();
                    String[] parts = request.split(";", 3);
                    String command = parts[0];

                    switch (command) {
                        // ------------------- USER -------------------
                        case "REGISTER": {
                            String username = parts[1];
                            String password = parts[2];
                            if (users.stream().anyMatch(u -> u.split(";")[0].equals(username))) {
                                dos.writeUTF("ERROR;T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i!");
                            } else {
                                users.add(username + ";" + password);
                                saveData();
                                dos.writeUTF("OK;ƒêƒÉng k√Ω th√†nh c√¥ng!");
                            }
                            break;
                        }
                        case "LOGIN": {
                            String username = parts[1];
                            String password = parts[2];
                            if (users.contains(username + ";" + password)) {
                                dos.writeUTF("OK;ƒêƒÉng nh·∫≠p th√†nh c√¥ng!");
                            } else {
                                dos.writeUTF("ERROR;Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u!");
                            }
                            break;
                        }
                        case "LIST_BOOKS": {
                            StringBuilder sb = new StringBuilder();
                            for (String b : books) sb.append(b).append("|");
                            dos.writeUTF("OK;" + sb.toString());
                            break;
                        }
                        case "BORROW": {
                            String username = parts[1];
                            String book = parts[2];

                            if (!books.contains(book)) {
                                dos.writeUTF("ERROR;Kh√¥ng t√¨m th·∫•y s√°ch!");
                            } else if (borrows.contains(book)) {
                                dos.writeUTF("ERROR;S√°ch ƒë√£ c√≥ ng∆∞·ªùi m∆∞·ª£n!");
                            } else {
                                borrows.add(book);
                                saveData();
                                dos.writeUTF("OK;M∆∞·ª£n s√°ch th√†nh c√¥ng! ƒêang ch·ªù duy·ªát.");
                            }
                            break;
                        }

                        // ------------------- ADMIN -------------------
                        case "ADD_BOOK": { // üîπ Th√™m m·ªõi
                            String bookName = parts[1];
                            if (books.contains(bookName)) {
                                dos.writeUTF("ERROR;S√°ch ƒë√£ t·ªìn t·∫°i!");
                            } else {
                                books.add(bookName);
                                saveData();
                                dos.writeUTF("OK;Th√™m s√°ch th√†nh c√¥ng!");
                            }
                            break;
                        }
                        case "EDIT_BOOK": { // üîπ Th√™m m·ªõi
                            String oldBook = parts[1];
                            String newBook = parts[2];
                            if (!books.contains(oldBook)) {
                                dos.writeUTF("ERROR;Kh√¥ng t√¨m th·∫•y s√°ch ƒë·ªÉ s·ª≠a!");
                            } else {
                                books.remove(oldBook);
                                books.add(newBook);
                                saveData();
                                dos.writeUTF("OK;S·ª≠a s√°ch th√†nh c√¥ng!");
                            }
                            break;
                        }
                        case "DELETE_BOOK": { // üîπ Th√™m m·ªõi
                            String bookName = parts[1];
                            if (!books.contains(bookName)) {
                                dos.writeUTF("ERROR;Kh√¥ng t√¨m th·∫•y s√°ch ƒë·ªÉ x√≥a!");
                            } else {
                                books.remove(bookName);
                                borrows.remove(bookName); // X√≥a lu√¥n n·∫øu s√°ch ƒëang m∆∞·ª£n
                                saveData();
                                dos.writeUTF("OK;X√≥a s√°ch th√†nh c√¥ng!");
                            }
                            break;
                        }
                        case "APPROVE_BORROW": { // üîπ Th√™m m·ªõi
                            String bookName = parts[1];
                            if (!borrows.contains(bookName)) {
                                dos.writeUTF("ERROR;Kh√¥ng c√≥ y√™u c·∫ßu m∆∞·ª£n cho s√°ch n√†y!");
                            } else {
                                // C√≥ th·ªÉ th√™m tr·∫°ng th√°i "ƒë√£ duy·ªát"
                                dos.writeUTF("OK;ƒê√£ duy·ªát y√™u c·∫ßu m∆∞·ª£n s√°ch: " + bookName);
                            }
                            break;
                        }

                        default:
                            dos.writeUTF("ERROR;L·ªánh kh√¥ng h·ª£p l·ªá!");
                    }
                }
            } catch (IOException e) {
                System.out.println("‚ùå Client ng·∫Øt k·∫øt n·ªëi: " + socket);
            }
        }
    }
}
